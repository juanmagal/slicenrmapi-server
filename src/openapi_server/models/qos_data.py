# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from openapi_server.models.arp import Arp


class QosData(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    QosData - a model defined in OpenAPI

        qos_id: The qos_id of this QosData [Optional].
        five_qi_value: The five_qi_value of this QosData [Optional].
        maxbr_ul: The maxbr_ul of this QosData [Optional].
        maxbr_dl: The maxbr_dl of this QosData [Optional].
        gbr_ul: The gbr_ul of this QosData [Optional].
        gbr_dl: The gbr_dl of this QosData [Optional].
        arp: The arp of this QosData [Optional].
        qos_notification_control: The qos_notification_control of this QosData [Optional].
        reflective_qos: The reflective_qos of this QosData [Optional].
        sharing_key_dl: The sharing_key_dl of this QosData [Optional].
        sharing_key_ul: The sharing_key_ul of this QosData [Optional].
        max_packet_loss_rate_dl: The max_packet_loss_rate_dl of this QosData [Optional].
        max_packet_loss_rate_ul: The max_packet_loss_rate_ul of this QosData [Optional].
        ext_max_data_burst_vol: The ext_max_data_burst_vol of this QosData [Optional].
    """

    qos_id: Optional[str] = Field(alias="qosId", default=None)
    five_qi_value: Optional[int] = Field(alias="fiveQIValue", default=None)
    maxbr_ul: Optional[str] = Field(alias="maxbrUl", default=None)
    maxbr_dl: Optional[str] = Field(alias="maxbrDl", default=None)
    gbr_ul: Optional[str] = Field(alias="gbrUl", default=None)
    gbr_dl: Optional[str] = Field(alias="gbrDl", default=None)
    arp: Optional[Arp] = Field(alias="arp", default=None)
    qos_notification_control: Optional[bool] = Field(alias="qosNotificationControl", default=None)
    reflective_qos: Optional[bool] = Field(alias="reflectiveQos", default=None)
    sharing_key_dl: Optional[str] = Field(alias="sharingKeyDl", default=None)
    sharing_key_ul: Optional[str] = Field(alias="sharingKeyUl", default=None)
    max_packet_loss_rate_dl: Optional[int] = Field(alias="maxPacketLossRateDl", default=None)
    max_packet_loss_rate_ul: Optional[int] = Field(alias="maxPacketLossRateUl", default=None)
    ext_max_data_burst_vol: Optional[int] = Field(alias="extMaxDataBurstVol", default=None)

    @validator("maxbr_ul")
    def maxbr_ul_pattern(cls, value):
        assert value is not None and re.match(r"^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$", value)
        return value

    @validator("maxbr_dl")
    def maxbr_dl_pattern(cls, value):
        assert value is not None and re.match(r"^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$", value)
        return value

    @validator("gbr_ul")
    def gbr_ul_pattern(cls, value):
        assert value is not None and re.match(r"^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$", value)
        return value

    @validator("gbr_dl")
    def gbr_dl_pattern(cls, value):
        assert value is not None and re.match(r"^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$", value)
        return value

    @validator("max_packet_loss_rate_dl")
    def max_packet_loss_rate_dl_max(cls, value):
        assert value <= 1000
        return value

    @validator("max_packet_loss_rate_dl")
    def max_packet_loss_rate_dl_min(cls, value):
        assert value >= 0
        return value

    @validator("max_packet_loss_rate_ul")
    def max_packet_loss_rate_ul_max(cls, value):
        assert value <= 1000
        return value

    @validator("max_packet_loss_rate_ul")
    def max_packet_loss_rate_ul_min(cls, value):
        assert value >= 0
        return value

    @validator("ext_max_data_burst_vol")
    def ext_max_data_burst_vol_max(cls, value):
        assert value <= 2000000
        return value

    @validator("ext_max_data_burst_vol")
    def ext_max_data_burst_vol_min(cls, value):
        assert value >= 4096
        return value

QosData.update_forward_refs()
