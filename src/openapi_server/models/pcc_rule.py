# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from openapi_server.models.af_sig_protocol import AfSigProtocol
from openapi_server.models.condition_data import ConditionData
from openapi_server.models.flow_information import FlowInformation
from openapi_server.models.qos_data import QosData
from openapi_server.models.traffic_control_data import TrafficControlData
from openapi_server.models.tscai_input_container import TscaiInputContainer


class PccRule(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    PccRule - a model defined in OpenAPI

        pcc_rule_id: The pcc_rule_id of this PccRule [Optional].
        flow_info_list: The flow_info_list of this PccRule [Optional].
        application_id: The application_id of this PccRule [Optional].
        app_descriptor: The app_descriptor of this PccRule [Optional].
        content_version: The content_version of this PccRule [Optional].
        precedence: The precedence of this PccRule [Optional].
        af_sig_protocol: The af_sig_protocol of this PccRule [Optional].
        is_app_relocatable: The is_app_relocatable of this PccRule [Optional].
        is_ue_addr_preserved: The is_ue_addr_preserved of this PccRule [Optional].
        qos_data: The qos_data of this PccRule [Optional].
        alt_qos_params: The alt_qos_params of this PccRule [Optional].
        traffic_control_data: The traffic_control_data of this PccRule [Optional].
        condition_data: The condition_data of this PccRule [Optional].
        tscai_input_dl: The tscai_input_dl of this PccRule [Optional].
        tscai_input_ul: The tscai_input_ul of this PccRule [Optional].
    """

    pcc_rule_id: Optional[str] = Field(alias="pccRuleId", default=None)
    flow_info_list: Optional[List[FlowInformation]] = Field(alias="flowInfoList", default=None)
    application_id: Optional[str] = Field(alias="applicationId", default=None)
    app_descriptor: Optional[str] = Field(alias="appDescriptor", default=None)
    content_version: Optional[int] = Field(alias="contentVersion", default=None)
    precedence: Optional[int] = Field(alias="precedence", default=None)
    af_sig_protocol: Optional[AfSigProtocol] = Field(alias="afSigProtocol", default=None)
    is_app_relocatable: Optional[bool] = Field(alias="isAppRelocatable", default=None)
    is_ue_addr_preserved: Optional[bool] = Field(alias="isUeAddrPreserved", default=None)
    qos_data: Optional[List[List]] = Field(alias="qosData", default=None)
    alt_qos_params: Optional[List[List]] = Field(alias="altQosParams", default=None)
    traffic_control_data: Optional[List[List]] = Field(alias="trafficControlData", default=None)
    condition_data: Optional[ConditionData] = Field(alias="conditionData", default=None)
    tscai_input_dl: Optional[TscaiInputContainer] = Field(alias="tscaiInputDl", default=None)
    tscai_input_ul: Optional[TscaiInputContainer] = Field(alias="tscaiInputUl", default=None)

    @validator("precedence")
    def precedence_min(cls, value):
        assert value >= 0
        return value

PccRule.update_forward_refs()
