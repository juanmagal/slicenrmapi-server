# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class EventThresholdTypeEventThreshold1F(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    EventThresholdTypeEventThreshold1F - a model defined in OpenAPI

        cpich_rscp: The cpich_rscp of this EventThresholdTypeEventThreshold1F [Optional].
        cpich_ec_no: The cpich_ec_no of this EventThresholdTypeEventThreshold1F [Optional].
        path_loss: The path_loss of this EventThresholdTypeEventThreshold1F [Optional].
    """

    cpich_rscp: Optional[int] = Field(alias="CPICH_RSCP", default=None)
    cpich_ec_no: Optional[int] = Field(alias="CPICH_EcNo", default=None)
    path_loss: Optional[int] = Field(alias="PathLoss", default=None)

    @validator("cpich_rscp")
    def cpich_rscp_max(cls, value):
        assert value <= 25
        return value

    @validator("cpich_rscp")
    def cpich_rscp_min(cls, value):
        assert value >= -120
        return value

    @validator("cpich_ec_no")
    def cpich_ec_no_max(cls, value):
        assert value <= 0
        return value

    @validator("cpich_ec_no")
    def cpich_ec_no_min(cls, value):
        assert value >= -24
        return value

    @validator("path_loss")
    def path_loss_max(cls, value):
        assert value <= 165
        return value

    @validator("path_loss")
    def path_loss_min(cls, value):
        assert value >= 30
        return value

EventThresholdTypeEventThreshold1F.update_forward_refs()
