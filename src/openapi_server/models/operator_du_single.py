# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from openapi_server.models.epf1_c_single import EPF1CSingle
from openapi_server.models.epf1_u_single import EPF1USingle
from openapi_server.models.vs_data_container_single import VsDataContainerSingle


class OperatorDuSingle(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    OperatorDuSingle - a model defined in OpenAPI

        id: The id of this OperatorDuSingle.
        object_class: The object_class of this OperatorDuSingle [Optional].
        object_instance: The object_instance of this OperatorDuSingle [Optional].
        vs_data_container: The vs_data_container of this OperatorDuSingle [Optional].
        gnb_id: The gnb_id of this OperatorDuSingle [Optional].
        gnb_id_length: The gnb_id_length of this OperatorDuSingle [Optional].
        ep_f1_c: The ep_f1_c of this OperatorDuSingle [Optional].
        ep_f1_u: The ep_f1_u of this OperatorDuSingle [Optional].
    """

    id: str = Field(alias="id")
    object_class: Optional[str] = Field(alias="objectClass", default=None)
    object_instance: Optional[str] = Field(alias="objectInstance", default=None)
    vs_data_container: Optional[List[VsDataContainerSingle]] = Field(alias="VsDataContainer", default=None)
    gnb_id: Optional[str] = Field(alias="gnbId", default=None)
    gnb_id_length: Optional[int] = Field(alias="gnbIdLength", default=None)
    ep_f1_c: Optional[EPF1CSingle] = Field(alias="EP_F1C", default=None)
    ep_f1_u: Optional[List[EPF1USingle]] = Field(alias="EP_F1U", default=None)

    @validator("gnb_id_length")
    def gnb_id_length_max(cls, value):
        assert value <= 32
        return value

    @validator("gnb_id_length")
    def gnb_id_length_min(cls, value):
        assert value >= 22
        return value

OperatorDuSingle.update_forward_refs()
