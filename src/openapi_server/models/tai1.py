# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class Tai1(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Tai1 - a model defined in OpenAPI

        mcc: The mcc of this Tai1 [Optional].
        mnc: The mnc of this Tai1 [Optional].
        tac: The tac of this Tai1 [Optional].
    """

    mcc: Optional[str] = Field(alias="mcc", default=None)
    mnc: Optional[str] = Field(alias="mnc", default=None)
    tac: Optional[str] = Field(alias="tac", default=None)

    @validator("mcc")
    def mcc_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]{3}$", value)
        return value

    @validator("mnc")
    def mnc_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]{2,3}$", value)
        return value

    @validator("tac")
    def tac_pattern(cls, value):
        assert value is not None and re.match(r"(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)", value)
        return value

Tai1.update_forward_refs()
