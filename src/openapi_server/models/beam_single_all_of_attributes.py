# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class BeamSingleAllOfAttributes(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    BeamSingleAllOfAttributes - a model defined in OpenAPI

        beam_index: The beam_index of this BeamSingleAllOfAttributes [Optional].
        beam_type: The beam_type of this BeamSingleAllOfAttributes [Optional].
        beam_azimuth: The beam_azimuth of this BeamSingleAllOfAttributes [Optional].
        beam_tilt: The beam_tilt of this BeamSingleAllOfAttributes [Optional].
        beam_horiz_width: The beam_horiz_width of this BeamSingleAllOfAttributes [Optional].
        beam_vert_width: The beam_vert_width of this BeamSingleAllOfAttributes [Optional].
    """

    beam_index: Optional[int] = Field(alias="beamIndex", default=None)
    beam_type: Optional[str] = Field(alias="beamType", default=None)
    beam_azimuth: Optional[int] = Field(alias="beamAzimuth", default=None)
    beam_tilt: Optional[int] = Field(alias="beamTilt", default=None)
    beam_horiz_width: Optional[int] = Field(alias="beamHorizWidth", default=None)
    beam_vert_width: Optional[int] = Field(alias="beamVertWidth", default=None)

    @validator("beam_azimuth")
    def beam_azimuth_max(cls, value):
        assert value <= 1800
        return value

    @validator("beam_azimuth")
    def beam_azimuth_min(cls, value):
        assert value >= -1800
        return value

    @validator("beam_tilt")
    def beam_tilt_max(cls, value):
        assert value <= 900
        return value

    @validator("beam_tilt")
    def beam_tilt_min(cls, value):
        assert value >= -900
        return value

    @validator("beam_horiz_width")
    def beam_horiz_width_max(cls, value):
        assert value <= 3599
        return value

    @validator("beam_horiz_width")
    def beam_horiz_width_min(cls, value):
        assert value >= 0
        return value

    @validator("beam_vert_width")
    def beam_vert_width_max(cls, value):
        assert value <= 1800
        return value

    @validator("beam_vert_width")
    def beam_vert_width_min(cls, value):
        assert value >= 0
        return value

BeamSingleAllOfAttributes.update_forward_refs()
