# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from openapi_server.models.flow_direction import FlowDirection


class EthFlowDescription(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    EthFlowDescription - a model defined in OpenAPI

        dest_mac_addr: The dest_mac_addr of this EthFlowDescription [Optional].
        eth_type: The eth_type of this EthFlowDescription.
        f_desc: The f_desc of this EthFlowDescription [Optional].
        f_dir: The f_dir of this EthFlowDescription [Optional].
        source_mac_addr: The source_mac_addr of this EthFlowDescription [Optional].
        vlan_tags: The vlan_tags of this EthFlowDescription [Optional].
        src_mac_addr_end: The src_mac_addr_end of this EthFlowDescription [Optional].
        dest_mac_addr_end: The dest_mac_addr_end of this EthFlowDescription [Optional].
    """

    dest_mac_addr: Optional[str] = Field(alias="destMacAddr", default=None)
    eth_type: str = Field(alias="ethType")
    f_desc: Optional[str] = Field(alias="fDesc", default=None)
    f_dir: Optional[FlowDirection] = Field(alias="fDir", default=None)
    source_mac_addr: Optional[str] = Field(alias="sourceMacAddr", default=None)
    vlan_tags: Optional[List[str]] = Field(alias="vlanTags", default=None)
    src_mac_addr_end: Optional[str] = Field(alias="srcMacAddrEnd", default=None)
    dest_mac_addr_end: Optional[str] = Field(alias="destMacAddrEnd", default=None)

    @validator("dest_mac_addr")
    def dest_mac_addr_pattern(cls, value):
        assert value is not None and re.match(r"^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$", value)
        return value

    @validator("source_mac_addr")
    def source_mac_addr_pattern(cls, value):
        assert value is not None and re.match(r"^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$", value)
        return value

    @validator("src_mac_addr_end")
    def src_mac_addr_end_pattern(cls, value):
        assert value is not None and re.match(r"^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$", value)
        return value

    @validator("dest_mac_addr_end")
    def dest_mac_addr_end_pattern(cls, value):
        assert value is not None and re.match(r"^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$", value)
        return value

EthFlowDescription.update_forward_refs()
