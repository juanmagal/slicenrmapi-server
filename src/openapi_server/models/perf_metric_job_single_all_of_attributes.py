# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from openapi_server.models.administrative_state import AdministrativeState
from openapi_server.models.operational_state import OperationalState
from openapi_server.models.reporting_ctrl import ReportingCtrl


class PerfMetricJobSingleAllOfAttributes(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    PerfMetricJobSingleAllOfAttributes - a model defined in OpenAPI

        administrative_state: The administrative_state of this PerfMetricJobSingleAllOfAttributes [Optional].
        operational_state: The operational_state of this PerfMetricJobSingleAllOfAttributes [Optional].
        job_id: The job_id of this PerfMetricJobSingleAllOfAttributes [Optional].
        performance_metrics: The performance_metrics of this PerfMetricJobSingleAllOfAttributes [Optional].
        granularity_period: The granularity_period of this PerfMetricJobSingleAllOfAttributes [Optional].
        object_instances: The object_instances of this PerfMetricJobSingleAllOfAttributes [Optional].
        root_object_instances: The root_object_instances of this PerfMetricJobSingleAllOfAttributes [Optional].
        reporting_ctrl: The reporting_ctrl of this PerfMetricJobSingleAllOfAttributes [Optional].
    """

    administrative_state: Optional[AdministrativeState] = Field(alias="administrativeState", default=None)
    operational_state: Optional[OperationalState] = Field(alias="operationalState", default=None)
    job_id: Optional[str] = Field(alias="jobId", default=None)
    performance_metrics: Optional[List[str]] = Field(alias="performanceMetrics", default=None)
    granularity_period: Optional[int] = Field(alias="granularityPeriod", default=None)
    object_instances: Optional[List[str]] = Field(alias="objectInstances", default=None)
    root_object_instances: Optional[List[str]] = Field(alias="rootObjectInstances", default=None)
    reporting_ctrl: Optional[ReportingCtrl] = Field(alias="reportingCtrl", default=None)

    @validator("granularity_period")
    def granularity_period_min(cls, value):
        assert value >= 1
        return value

PerfMetricJobSingleAllOfAttributes.update_forward_refs()
