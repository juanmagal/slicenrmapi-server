# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class DMROFunctionSingleAllOfAttributes(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    DMROFunctionSingleAllOfAttributes - a model defined in OpenAPI

        dmro_control: The dmro_control of this DMROFunctionSingleAllOfAttributes [Optional].
        maximum_deviation_ho_trigger_low: The maximum_deviation_ho_trigger_low of this DMROFunctionSingleAllOfAttributes [Optional].
        maximum_deviation_ho_trigger_high: The maximum_deviation_ho_trigger_high of this DMROFunctionSingleAllOfAttributes [Optional].
        minimum_time_between_ho_trigger_change: The minimum_time_between_ho_trigger_change of this DMROFunctionSingleAllOfAttributes [Optional].
        tstore_u_ecntxt: The tstore_u_ecntxt of this DMROFunctionSingleAllOfAttributes [Optional].
    """

    dmro_control: Optional[bool] = Field(alias="dmroControl", default=None)
    maximum_deviation_ho_trigger_low: Optional[int] = Field(alias="maximumDeviationHoTriggerLow", default=None)
    maximum_deviation_ho_trigger_high: Optional[int] = Field(alias="maximumDeviationHoTriggerHigh", default=None)
    minimum_time_between_ho_trigger_change: Optional[int] = Field(alias="minimumTimeBetweenHoTriggerChange", default=None)
    tstore_u_ecntxt: Optional[int] = Field(alias="tstoreUEcntxt", default=None)

    @validator("maximum_deviation_ho_trigger_low")
    def maximum_deviation_ho_trigger_low_max(cls, value):
        assert value <= 20
        return value

    @validator("maximum_deviation_ho_trigger_low")
    def maximum_deviation_ho_trigger_low_min(cls, value):
        assert value >= -20
        return value

    @validator("maximum_deviation_ho_trigger_high")
    def maximum_deviation_ho_trigger_high_max(cls, value):
        assert value <= 20
        return value

    @validator("maximum_deviation_ho_trigger_high")
    def maximum_deviation_ho_trigger_high_min(cls, value):
        assert value >= -20
        return value

    @validator("minimum_time_between_ho_trigger_change")
    def minimum_time_between_ho_trigger_change_max(cls, value):
        assert value <= 604800
        return value

    @validator("minimum_time_between_ho_trigger_change")
    def minimum_time_between_ho_trigger_change_min(cls, value):
        assert value >= 0
        return value

    @validator("tstore_u_ecntxt")
    def tstore_u_ecntxt_max(cls, value):
        assert value <= 1023
        return value

    @validator("tstore_u_ecntxt")
    def tstore_u_ecntxt_min(cls, value):
        assert value >= 0
        return value

DMROFunctionSingleAllOfAttributes.update_forward_refs()
